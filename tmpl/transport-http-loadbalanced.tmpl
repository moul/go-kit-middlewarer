// Autogenerated code, do not change directly.
// To make changes to this file, please modify the templates at
// go-kit-middlewarer/tmpl/*.tmpl

package http

import (
	"golang.org/x/net/context"

	{{range .ExtraImports}}
	{{.}}{{end}}

	kitsd "github.com/go-kit/kit/sd"
	kitloadbalancer "github.com/go-kit/kit/sd/lb"
	httptransport "github.com/go-kit/kit/transport/http"
	kitendpoint "github.com/go-kit/kit/endpoint"

	"{{.EndpointPackage}}"
	{{.BasePackageImport}}
)

// LoadBalancerRetryCount refers to the number of times the Loadbalanced backed
// client will attempt to get an endpoint.
var LoadBalancerRetryCount = 3

// endpointFromLoadBalancer is a nice helper function that will pull an endpoint
// off of a load balancer and initiate the request.  However, if an error is
// encountered, it will handle it instead.
func endpointFromLoadBalancer( lb kitloadbalancer.Balancer ) kitendpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var ep kitendpoint.Endpoint
		var err error
		for i := 0; i < LoadBalancerRetryCount; i++ {
			ep, err = lb.Endpoint()
			if err != nil && err != kitloadbalancer.ErrNoEndpoints {
				continue
			}
			break
		}

		if err != nil {
			return nil, err
		}

		return ep(ctx, request)
	}
}

// GetLoadBalancerFunc describes a function which takes a
// github.com/go-kit/kit/loadbalancer.LoadBalancer and returns a
// github.com/go-kit/kit/loadbalancer.LoadBalancer
type GetLoadBalancerFunc func( kitsd.Factory ) kitloadbalancer.Balancer

// NewLoadBalancedClient is a function that will return a Load balanced
// client based on the load balancing conversion function provided.
func NewLoadBalancedClient( get GetLoadBalancerFunc, {{range .ExtraInterfaces}}{{.Name}} {{.Type}}, {{end}}wrappers ...ClientLayer ) {{.BasePackageName}}.{{.InterfaceName}} {
	return NewLoadBalancedClientWithConfig( get, {{range .ExtraInterfaces}}{{.Name}}, {{end}}ClientConfig{ ClientLayers: wrappers})
}

// NewLoadBalancedClientWithOptions is a function that will return a Load balanced
// client based on the load balancing conversion function provided.
func NewLoadBalancedClientWithOptions( get GetLoadBalancerFunc, {{range .ExtraInterfaces}}{{.Name}} {{.Type}}, {{end}}wrappers []ClientLayer, options []httptransport.ClientOption ) {{.BasePackageName}}.{{.InterfaceName}} {
	return NewLoadBalancedClientWithConfig( get, {{range .ExtraInterfaces}}{{.Name}}, {{end}}ClientConfig{ ClientLayers: wrappers, Options: options})
}

func NewLoadBalancedClientWithConfig(get GetLoadBalancerFunc, {{range .ExtraInterfaces}}{{.Name}} {{.Type}}, {{end}}config ClientConfig)  {{.BasePackageName}}.{{.InterfaceName}} {
	if config.Method == "" {
		config.Method = "GET"
	}

	return &client{{.InterfaceName}} {
		{{range .ExtraInterfaces}}{{.PublicName}}: {{.Name}},
		{{end}}
		{{range .Methods}}{{.MethodNameLcase}}Endpoint: endpointFromLoadBalancer(get( clientFactory({{.EndpointPackageName}}.Path{{.MethodName}}, encode{{.MethodName}}Request, decode{{.MethodName}}Response, config))),
		{{end}}
	}
}
